# Liyema Swartbooi - Thu, 19 Jan 2024 12:00:00 +0000
# client3.py - Patch 1/4
class App extends Component<{}, IState> {
    constructor(props: {}) {
        super(props);

        this.state = {
            data: [],
            showGraph: false
        };
    }

    renderGraph() {
        if (this.state.showGraph) {
            return (<Graph data={this.state.data}/>)
        }
    }

    getDataFromServer() {
        let x = 0;
        const interval = setInterval(() => {
            DataStreamer.getData((serverResponds: ServerRespond[]) => {
                this.setState({
                    data: serverResponds,
                    showGraph: true
                });
            });
            x++;
            if (x > 1000) {
                clearInterval(interval);
            }
        }, 100);
    }

    render() {
        return (
            <div className="App">
                <header className="App-header">
                    Bank & Merge Co Task 2
                </header>
                <div className="App-content">
                    <button className="btn btn-primary Stream-button"
                        onClick={() => {
                            this.getDataFromServer()
                        }}>
                        Start Streaming Data
                    </button>
                    <div className="Graph">
                        {this.renderGraph()}
                    </div>
                </div>
            </div>
        )
    }
}

# Liyema Swartbooi - Thu, 19 Jan 2024 12:00:00 +0000
# client3.py - Patch 2/4
class Graph extends Component<IProps, {}> {
    table: Table | undefined;

    render() {
        return React.createElement('perspective-viewer');
    }

    componentDidMount() {
        const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;

        const schema = {
            stock: 'string',
            top_ask_price: 'float',
            top_bid_price: 'float',
            timestamp: 'date',
        };

        if (window.perspective && window.perspective.worker()) {
            this.table = window.perspective.worker().table(schema);
        }
        if (this.table) {
            elem.load(this.table);
            elem.setAttribute("view", "y_line");
            elem.setAttribute("column-pivots", '["stock"]');
            elem.setAttribute("row_pivots", '["timestamp"]');
            elem.setAttribute("columns", '["top_ask_price"]');
            elem.setAttribute("aggregates",
                '{"stock":"distinct_count", "top_ask_price":"avg", "top_bid_price":"avg", "timestamp":"distinct_count"}'
            );
        }
    }

    componentDidUpdate() {
        if (this.table) {
            this.table.update(this.props.data.map((el: any) => {
                return {
                    stock: el.stock,
                    top_ask_price: el.top_ask && el.top_ask.price || 0,
                    top_bid_price: el.top_bid && el.top_bid.price || 0,
                    timestamp: el.timestamp,
                };
            }));
        }
    }
}
